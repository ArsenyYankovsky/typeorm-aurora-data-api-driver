{"version":3,"file":"typeorm-aurora-data-api-driver.umd.js","sources":["../node_modules/sqlstring/lib/SqlString.js","../node_modules/sqlstring/index.js","../node_modules/data-api-client/index.js","../src/typeorm-aurora-data-api-driver.ts"],"sourcesContent":["var SqlString  = exports;\n\nvar ID_GLOBAL_REGEXP    = /`/g;\nvar QUAL_GLOBAL_REGEXP  = /\\./g;\nvar CHARS_GLOBAL_REGEXP = /[\\0\\b\\t\\n\\r\\x1a\\\"\\'\\\\]/g; // eslint-disable-line no-control-regex\nvar CHARS_ESCAPE_MAP    = {\n  '\\0'   : '\\\\0',\n  '\\b'   : '\\\\b',\n  '\\t'   : '\\\\t',\n  '\\n'   : '\\\\n',\n  '\\r'   : '\\\\r',\n  '\\x1a' : '\\\\Z',\n  '\"'    : '\\\\\"',\n  '\\''   : '\\\\\\'',\n  '\\\\'   : '\\\\\\\\'\n};\n\nSqlString.escapeId = function escapeId(val, forbidQualified) {\n  if (Array.isArray(val)) {\n    var sql = '';\n\n    for (var i = 0; i < val.length; i++) {\n      sql += (i === 0 ? '' : ', ') + SqlString.escapeId(val[i], forbidQualified);\n    }\n\n    return sql;\n  } else if (forbidQualified) {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``') + '`';\n  } else {\n    return '`' + String(val).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';\n  }\n};\n\nSqlString.escape = function escape(val, stringifyObjects, timeZone) {\n  if (val === undefined || val === null) {\n    return 'NULL';\n  }\n\n  switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val + '';\n    case 'object':\n      if (val instanceof Date) {\n        return SqlString.dateToString(val, timeZone || 'local');\n      } else if (Array.isArray(val)) {\n        return SqlString.arrayToList(val, timeZone);\n      } else if (Buffer.isBuffer(val)) {\n        return SqlString.bufferToString(val);\n      } else if (typeof val.toSqlString === 'function') {\n        return String(val.toSqlString());\n      } else if (stringifyObjects) {\n        return escapeString(val.toString());\n      } else {\n        return SqlString.objectToValues(val, timeZone);\n      }\n    default: return escapeString(val);\n  }\n};\n\nSqlString.arrayToList = function arrayToList(array, timeZone) {\n  var sql = '';\n\n  for (var i = 0; i < array.length; i++) {\n    var val = array[i];\n\n    if (Array.isArray(val)) {\n      sql += (i === 0 ? '' : ', ') + '(' + SqlString.arrayToList(val, timeZone) + ')';\n    } else {\n      sql += (i === 0 ? '' : ', ') + SqlString.escape(val, true, timeZone);\n    }\n  }\n\n  return sql;\n};\n\nSqlString.format = function format(sql, values, stringifyObjects, timeZone) {\n  if (values == null) {\n    return sql;\n  }\n\n  if (!(values instanceof Array || Array.isArray(values))) {\n    values = [values];\n  }\n\n  var chunkIndex        = 0;\n  var placeholdersRegex = /\\?+/g;\n  var result            = '';\n  var valuesIndex       = 0;\n  var match;\n\n  while (valuesIndex < values.length && (match = placeholdersRegex.exec(sql))) {\n    var len = match[0].length;\n\n    if (len > 2) {\n      continue;\n    }\n\n    var value = len === 2\n      ? SqlString.escapeId(values[valuesIndex])\n      : SqlString.escape(values[valuesIndex], stringifyObjects, timeZone);\n\n    result += sql.slice(chunkIndex, match.index) + value;\n    chunkIndex = placeholdersRegex.lastIndex;\n    valuesIndex++;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was replaced\n    return sql;\n  }\n\n  if (chunkIndex < sql.length) {\n    return result + sql.slice(chunkIndex);\n  }\n\n  return result;\n};\n\nSqlString.dateToString = function dateToString(date, timeZone) {\n  var dt = new Date(date);\n\n  if (isNaN(dt.getTime())) {\n    return 'NULL';\n  }\n\n  var year;\n  var month;\n  var day;\n  var hour;\n  var minute;\n  var second;\n  var millisecond;\n\n  if (timeZone === 'local') {\n    year        = dt.getFullYear();\n    month       = dt.getMonth() + 1;\n    day         = dt.getDate();\n    hour        = dt.getHours();\n    minute      = dt.getMinutes();\n    second      = dt.getSeconds();\n    millisecond = dt.getMilliseconds();\n  } else {\n    var tz = convertTimezone(timeZone);\n\n    if (tz !== false && tz !== 0) {\n      dt.setTime(dt.getTime() + (tz * 60000));\n    }\n\n    year       = dt.getUTCFullYear();\n    month       = dt.getUTCMonth() + 1;\n    day         = dt.getUTCDate();\n    hour        = dt.getUTCHours();\n    minute      = dt.getUTCMinutes();\n    second      = dt.getUTCSeconds();\n    millisecond = dt.getUTCMilliseconds();\n  }\n\n  // YYYY-MM-DD HH:mm:ss.mmm\n  var str = zeroPad(year, 4) + '-' + zeroPad(month, 2) + '-' + zeroPad(day, 2) + ' ' +\n    zeroPad(hour, 2) + ':' + zeroPad(minute, 2) + ':' + zeroPad(second, 2) + '.' +\n    zeroPad(millisecond, 3);\n\n  return escapeString(str);\n};\n\nSqlString.bufferToString = function bufferToString(buffer) {\n  return 'X' + escapeString(buffer.toString('hex'));\n};\n\nSqlString.objectToValues = function objectToValues(object, timeZone) {\n  var sql = '';\n\n  for (var key in object) {\n    var val = object[key];\n\n    if (typeof val === 'function') {\n      continue;\n    }\n\n    sql += (sql.length === 0 ? '' : ', ') + SqlString.escapeId(key) + ' = ' + SqlString.escape(val, true, timeZone);\n  }\n\n  return sql;\n};\n\nSqlString.raw = function raw(sql) {\n  if (typeof sql !== 'string') {\n    throw new TypeError('argument sql must be a string');\n  }\n\n  return {\n    toSqlString: function toSqlString() { return sql; }\n  };\n};\n\nfunction escapeString(val) {\n  var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;\n  var escapedVal = '';\n  var match;\n\n  while ((match = CHARS_GLOBAL_REGEXP.exec(val))) {\n    escapedVal += val.slice(chunkIndex, match.index) + CHARS_ESCAPE_MAP[match[0]];\n    chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;\n  }\n\n  if (chunkIndex === 0) {\n    // Nothing was escaped\n    return \"'\" + val + \"'\";\n  }\n\n  if (chunkIndex < val.length) {\n    return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  }\n\n  return \"'\" + escapedVal + \"'\";\n}\n\nfunction zeroPad(number, length) {\n  number = number.toString();\n  while (number.length < length) {\n    number = '0' + number;\n  }\n\n  return number;\n}\n\nfunction convertTimezone(tz) {\n  if (tz === 'Z') {\n    return 0;\n  }\n\n  var m = tz.match(/([\\+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n  if (m) {\n    return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n  }\n  return false;\n}\n","module.exports = require('./lib/SqlString');\n","'use strict'\n\n/*\n * This module provides a simplified interface into the Aurora Serverless\n * Data API by abstracting away the notion of field values.\n *\n * More detail regarding the Aurora Serverless Data APIcan be found here:\n * https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\n *\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @version 1.0.0-beta\n * @license MIT\n */\n\n// Require the aws-sdk. This is a dev dependency, so if being used\n// outside of a Lambda execution environment, it must be manually installed.\nconst AWS = require('aws-sdk')\n\n// Require sqlstring to add additional escaping capabilities\nconst sqlString = require('sqlstring')\n\n/**********************************************************************/\n/** Enable HTTP Keep-Alive per https://vimeo.com/287511222          **/\n/** This dramatically increases the speed of subsequent HTTP calls  **/\n/**********************************************************************/\n\n  const https = require('https')\n\n  const sslAgent = new https.Agent({\n    keepAlive: true,\n    maxSockets: 50, // same as aws-sdk\n    rejectUnauthorized: true  // same as aws-sdk\n  })\n  sslAgent.setMaxListeners(0) // same as aws-sdk\n\n\n/********************************************************************/\n/**  PRIVATE METHODS                                               **/\n/********************************************************************/\n\n  // Simple error function\n  const error = (...err) => { throw Error(...err) }\n\n  // Parse SQL statement from provided arguments\n  const parseSQL = args =>\n    typeof args[0] === 'string' ? args[0]\n    : typeof args[0] === 'object' && typeof args[0].sql === 'string' ? args[0].sql\n    : error(`No 'sql' statement provided.`)\n\n  // Parse the parameters from provided arguments\n  const parseParams = args =>\n    Array.isArray(args[0].parameters) ? args[0].parameters\n    : typeof args[0].parameters === 'object' ? [args[0].parameters]\n    : Array.isArray(args[1]) ? args[1]\n    : typeof args[1] === 'object' ? [args[1]]\n    : args[0].parameters ? error(`'parameters' must be an object or array`)\n    : args[1] ?  error(`Parameters must be an object or array`)\n    : []\n\n  // Parse the supplied database, or default to config\n  const parseDatabase = (config,args) =>\n    config.transactionId ? config.database\n    : typeof args[0].database === 'string' ? args[0].database\n    : args[0].database ? error(`'database' must be a string.`)\n    : config.database ? config.database\n    : error(`No 'database' provided.`)\n\n  // Parse the supplied hydrateColumnNames command, or default to config\n  const parseHydrate = (config,args) =>\n    typeof args[0].hydrateColumnNames === 'boolean' ? args[0].hydrateColumnNames\n    : args[0].hydrateColumnNames ? error(`'hydrateColumnNames' must be a boolean.`)\n    : config.hydrateColumnNames\n\n  // Prepare method params w/ supplied inputs if an object is passed\n  const prepareParams = ({ secretArn,resourceArn },args) => {\n    return Object.assign(\n      { secretArn,resourceArn }, // return Arns\n      typeof args[0] === 'object' ?\n        omit(args[0],['hydrateColumnNames','parameters']) : {} // merge any inputs\n    )\n  }\n\n  // Utility function for removing certain keys from an object\n  const omit = (obj,values) => Object.keys(obj).reduce((acc,x) =>\n    values.includes(x) ? acc : Object.assign(acc,{ [x]: obj[x] })\n  ,{})\n\n  // Utility function for picking certain keys from an object\n  const pick = (obj,values) => Object.keys(obj).reduce((acc,x) =>\n    values.includes(x) ? Object.assign(acc,{ [x]: obj[x] }) : acc\n  ,{})\n\n  // Utility function for flattening arrays\n  const flatten = arr => arr.reduce((acc,x) => acc.concat(x),[])\n\n  // Normize parameters so that they are all in standard format\n  const normalizeParams = params => params.reduce((acc,p) =>\n    Array.isArray(p) ? acc.concat([normalizeParams(p)])\n      : Object.keys(p).length === 2 && p.name && p.value ? acc.concat(p)\n      : acc.concat(splitParams(p))\n  ,[]) // end reduce\n\n  // Annotate parameters with correct types\n  const annotateParams = params => params.reduce((acc,p) =>\n    Array.isArray(p) ? acc.concat([annotateParams(p)])\n      : Object.keys(p).length === 2 && p.name && p.value ? acc.concat(p)\n      : acc.concat(\n        formatParam(Object.keys(p)[0],Object.values(p)[0])\n      )\n  ,[]) // end reduce\n\n\n  // Prepare parameters\n  const processParams = (sql,sqlParams,params,row=0) => {\n    return {\n      processedParams: params.reduce((acc,p,i) => {\n        if (Array.isArray(p)) {\n          let result = processParams(sql,sqlParams,p,row)\n          if (row === 0) { sql = result.escapedSql; row++ }\n          return acc.concat([result.processedParams])\n        } else if (sqlParams[p.name]) {\n          if (sqlParams[p.name].type === 'n_ph') {\n            acc[sqlParams[p.name].index] = formatParam(p.name,p.value)\n          } else if (row === 0) {\n            let regex = new RegExp('::' + p.name + '\\\\b','g')\n            sql = sql.replace(regex,sqlString.escapeId(p.value))\n          }\n          return acc\n        } else {\n          return acc\n        }\n      },[]),\n      escapedSql: sql\n    }\n  }\n\n  // Converts parameter to the name/value format\n  const formatParam = (n,v) => formatType(n,v,getType(v))\n\n  const splitParams = p => Object.keys(p).reduce((arr,x) =>\n    arr.concat({ name: x, value: p[x] }),[])\n\n  // This appears to be a bug, so hopefully it will go away soon, but named\n  // parameters will *not* work if they are out of order! :facepalm:\n  const getSqlParams = sql => {\n    let p = 0 // position index for named parameters\n    // TODO: probably need to remove comments from the sql\n    // TODO: placeholders?\n    // sql.match(/\\:{1,2}\\w+|\\?+/g).map((p,i) => {\n    return (sql.match(/\\:{1,2}\\w+/g) || []).map((p,i) => {\n      return p === '??' ? { type: 'id' } // identifier\n        : p === '?' ? { type: 'ph', label: '__d'+i  } // placeholder\n        : p.startsWith('::') ? { type: 'n_id', label: p.substr(2) } // named id\n        : { type: 'n_ph', label: p.substr(1) } // named placeholder\n    }).reduce((acc,x,i) => {\n      return Object.assign(acc,\n        {\n          [x.label]: {\n            type: x.type, index: x.type === 'n_ph' ? p++ : undefined\n          }\n        }\n      )\n    },{}) // end reduce\n  }\n\n  // Gets the value type and returns the correct value field name\n  // TODO: Support more types as the are released\n  const getType = val =>\n    typeof val === 'string' ? 'stringValue'\n    : typeof val === 'boolean' ? 'booleanValue'\n    : typeof val === 'number' && parseInt(val) === val ? 'longValue'\n    : typeof val === 'number' && parseFloat(val) === val ? 'doubleValue'\n    : val === null ? 'isNull'\n    : Buffer.isBuffer(val) ? 'blobValue'\n    // : Array.isArray(val) ? 'arrayValue' This doesn't work yet\n    : undefined\n\n  // Creates a standard Data API parameter using the supplied inputs\n  const formatType = (name,value,type) => {\n    return {\n      name,\n      value: {\n        [type ? type : error(`'${name}'' is an invalid type`)] :\n          type === 'isNull' ? true : value\n      }\n    }\n  } // end formatType\n\n  // Formats the results of a query response\n  // TODO: Support generatedFields (use case insertId)\n  const formatResults = (\n    { // destructure results\n      columnMetadata, // ONLY when hydrate or includeResultMetadata is true\n      numberOfRecordsUpdated, // ONLY for executeStatement method\n      records, // ONLY for executeStatement method\n      generatedFields, // ONLY for INSERTS\n      updateResults // ONLY on batchExecuteStatement\n    },\n    hydrate,\n    includeMeta\n  ) =>\n    Object.assign(\n      includeMeta ? { columnMetadata } : {},\n      numberOfRecordsUpdated !== undefined ? { numberOfRecordsUpdated } : {},\n      records ? {\n        records: formatRecords(records, hydrate ? columnMetadata : false)\n      } : {},\n      updateResults ? { updateResults: formatUpdateResults(updateResults) } : {},\n      generatedFields && generatedFields.length > 0 ?\n        { insertId: generatedFields[0].longValue } : {}\n    )\n\n  // Processes records and either extracts Typed Values into an array, or\n  // object with named column labels\n  const formatRecords = (recs,columns) => {\n\n    // Create map for efficient value parsing\n    let fmap = recs && recs[0] ? recs[0].map((x,i) => {\n      return Object.assign({},\n        columns ? { label: columns[i].label } : {} ) // add column labels\n    }) : {}\n\n    // Map over all the records (rows)\n    return recs ? recs.map(rec => {\n\n      // Reduce each field in the record (row)\n      return rec.reduce((acc,field,i) => {\n\n        // If the field is null, always return null\n        if (field.isNull === true) {\n          return columns ? // object if hydrate, else array\n            Object.assign(acc,{ [fmap[i].label]: null })\n            : acc.concat(null)\n\n        // If the field is mapped, return the mapped field\n        } else if (fmap[i] && fmap[i].field) {\n          return columns ? // object if hydrate, else array\n            Object.assign(acc,{ [fmap[i].label]: field[fmap[i].field] })\n            : acc.concat(field[fmap[i].field])\n\n        // Else discover the field type\n        } else {\n\n          // Look for non-null fields\n          Object.keys(field).map(type => {\n            if (type !== 'isNull' && field[type] !== null) {\n              fmap[i]['field'] = type\n            }\n          })\n\n          // Return the mapped field (this should NEVER be null)\n          return columns ? // object if hydrate, else array\n            Object.assign(acc,{ [fmap[i].label]: field[fmap[i].field] })\n            : acc.concat(field[fmap[i].field])\n        }\n\n      }, columns ? {} : []) // init object if hydrate, else init array\n    }) : [] // empty record set returns an array\n  } // end formatRecords\n\n  // Format updateResults and extract insertIds\n  const formatUpdateResults = res => res.map(x => {\n    return x.generatedFields && x.generatedFields.length > 0 ?\n      { insertId: x.generatedFields[0].longValue } : {}\n  })\n\n\n  // Merge configuration data with supplied arguments\n  const mergeConfig = ({secretArn,resourceArn,database},args) =>\n    Object.assign({secretArn,resourceArn,database},args)\n\n\n\n/********************************************************************/\n/**  QUERY MANAGEMENT                                              **/\n/********************************************************************/\n\n  // Query function (use standard form for `this` context)\n  const query = async function(config,..._args) {\n\n    // Flatten passed in args to single depth array\n    const args = flatten(_args)\n\n    // Parse and process sql\n    const sql = parseSQL(args)\n    const sqlParams = getSqlParams(sql)\n\n    // Parse hydration setting\n    const hydrateColumnNames = parseHydrate(config,args)\n\n    // Parse and normalize parameters\n    const parameters = normalizeParams(parseParams(args))\n\n    // Process parameters and escape necessary SQL\n    const { processedParams,escapedSql } = processParams(sql,sqlParams,parameters)\n\n    // Determine if this is a batch request\n    const isBatch = processedParams.length > 0\n      && Array.isArray(processedParams[0]) ? true : false\n\n    const params = Object.assign(\n      prepareParams(config,args),\n      {\n        database: parseDatabase(config,args), // add database\n        sql: escapedSql // add escaped sql statement\n      },\n      // Only include parameters if they exist\n      processedParams.length > 0 ?\n        // Batch statements require parameterSets instead of parameters\n        { [isBatch ? 'parameterSets' : 'parameters']: processedParams } : {},\n      // Force meta data if set and not a batch\n      hydrateColumnNames && !isBatch ? { includeResultMetadata: true } : {},\n      // If a transactionId is passed, overwrite any manual input\n      config.transactionId ? { transactionId: config.transactionId } : {}\n    ) // end params\n\n    try { // attempt to run the query\n\n      // Capture the result for debugging\n      let result = await (isBatch ? config.RDS.batchExecuteStatement(params).promise()\n        : config.RDS.executeStatement(params).promise())\n\n      // console.log(result)\n\n      // Format and return the results\n      return formatResults(\n        result,\n        hydrateColumnNames,\n        args[0].includeResultMetadata === true ? true : false\n      )\n\n    } catch(e) {\n\n      if (this && this.rollback) {\n        let rollback = await config.RDS.rollbackTransaction(\n          pick(params,['resourceArn','secretArn','transactionId'])\n        ).promise()\n\n        this.rollback(e,rollback)\n      }\n      // Throw the error\n      throw e\n    }\n\n  } // end query\n\n\n\n/********************************************************************/\n/**  TRANSACTION MANAGEMENT                                        **/\n/********************************************************************/\n\n  // Init a transaction object and return methods\n  const transaction = (config,_args) => {\n\n    let args = typeof _args === 'object' ? [_args] : [{}]\n    let queries = [] // keep track of queries\n    let rollback = () => {} // default rollback event\n\n    const txConfig = Object.assign(\n      prepareParams(config,args),\n      {\n        database: parseDatabase(config,args), // add database\n        hydrateColumnNames: parseHydrate(config,args), // add hydrate\n        RDS: config.RDS // reference the RDSDataService instance\n      }\n    )\n\n    return {\n      query: function(...args) {\n        if (typeof args[0] === 'function') {\n          queries.push(args[0])\n        } else {\n          queries.push(() => [...args])\n        }\n        return this\n      },\n      rollback: function(fn) {\n        if (typeof fn === 'function') { rollback = fn }\n        return this\n      },\n      commit: async function() { return await commit(txConfig,queries,rollback) }\n    }\n  }\n\n  // Commit transaction by running queries\n  const commit = async (config,queries,rollback) => {\n\n    let results = [] // keep track of results\n\n    // Start a transaction\n    const { transactionId } = await config.RDS.beginTransaction(\n      pick(config,['resourceArn','secretArn','database'])\n    ).promise()\n\n    // Add transactionId to the config\n    let txConfig = Object.assign(config, { transactionId })\n\n    // Loop through queries\n    for (let i = 0; i < queries.length; i++) {\n      // Execute the queries, pass the rollback as context\n      let result = await query.apply({rollback},[config,queries[i](results[results.length-1],results)])\n      // Add the result to the main results accumulator\n      results.push(result)\n    }\n\n    // Commit our transaction\n    const { transactionStatus } = await txConfig.RDS.commitTransaction(\n      pick(config,['resourceArn','secretArn','transactionId'])\n    ).promise()\n\n    // Add the transaction status to the results\n    results.push({transactionStatus})\n\n    // Return the results\n    return results\n  }\n\n/********************************************************************/\n/**  INSTANTIATION                                                 **/\n/********************************************************************/\n\n// Export main function\nmodule.exports = (params) => {\n\n  // Set the options for the RDSDataService\n  const options = typeof params.options === 'object' ? params.options\n    : params.options !== undefined ? error(`'options' must be an object`)\n    : {}\n\n  // Update the default AWS http agent with our new sslAgent\n  if (typeof params.keepAlive !== false) {\n    AWS.config.update({ httpOptions: { agent: sslAgent } })\n  }\n\n  // Set the configuration for this instance\n  const config = {\n\n    // Require secretArn\n    secretArn: typeof params.secretArn === 'string' ? params.secretArn\n      : error(`'secretArn' string value required`),\n\n    // Require resourceArn\n    resourceArn: typeof params.resourceArn === 'string' ? params.resourceArn\n     : error(`'resourceArn' string value required`),\n\n    // Load optional database\n    database: typeof params.database === 'string' ? params.database\n      : params.database !== undefined ? error(`'database' must be a string`)\n      : undefined,\n\n    // Load optional schema DISABLED for now since this isn't used with MySQL\n    // schema: typeof params.schema === 'string' ? params.schema\n    //   : params.schema !== undefined ? error(`'schema' must be a string`)\n    //   : undefined,\n\n    // Set hydrateColumnNames (default to true)\n    hydrateColumnNames:\n      typeof params.hydrateColumnNames === 'boolean' ?\n        params.hydrateColumnNames : true,\n\n    // TODO: Put this in a separate module for testing?\n    // Create an instance of RDSDataService\n    RDS: new AWS.RDSDataService(options)\n\n  } // end config\n\n  // Return public methods\n  return {\n    // Query method, pass config and parameters\n    query: (...x) => query(config,...x),\n    // Transaction method, pass config and parameters\n    transaction: (x) => transaction(config,x),\n\n    // Export promisified versions of the RDSDataService methods\n    batchExecuteStatement: (args) =>\n      config.RDS.batchExecuteStatement(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    beginTransaction: (args) =>\n      config.RDS.beginTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    commitTransaction: (args) =>\n      config.RDS.commitTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn']),args)\n      ).promise(),\n    executeStatement: (args) =>\n      config.RDS.executeStatement(\n        mergeConfig(pick(config,['resourceArn','secretArn','database']),args)\n      ).promise(),\n    rollbackTransaction: (args) =>\n      config.RDS.rollbackTransaction(\n        mergeConfig(pick(config,['resourceArn','secretArn']),args)\n      ).promise()\n  }\n\n} // end exports\n","// @ts-ignore\nimport createDataApiClient from 'data-api-client'\n\nexport default class DataApiDriver {\n  public static transformQueryAndParameters(query: string, parameters?: any[]): any {\n    const queryParamRegex = /\\?(?=(([^(\")\\\\]*(\\\\.|\"([^\"\\\\]*\\\\.)*[^\"\\\\]*\"))*[^\"]*$))(?=(([^(')\\\\]*(\\\\.|'([^'\\\\]*\\\\.)*[^'\\\\]*'))*[^']*$))/g\n\n    let numberOfParametersInQueryString = 0\n\n    const newQueryString = query.replace(queryParamRegex, () => {\n      const paramName = `param_${numberOfParametersInQueryString}`\n\n      numberOfParametersInQueryString += 1\n\n      return `:${paramName}`\n    })\n\n    if (\n      parameters &&\n      parameters.length > 0 &&\n      parameters.length % numberOfParametersInQueryString !== 0\n    ) {\n      throw new Error(`Number of parameters mismatch, got ${numberOfParametersInQueryString} in query string \\\n            and ${parameters.length} in input`)\n    }\n\n    const transformedParameters: any[] = []\n\n    if (parameters && parameters.length > 0) {\n      const numberOfObjects = parameters.length / numberOfParametersInQueryString\n\n      for (let i = 0; i < numberOfObjects; i += 1) {\n        const parameterObject: any = {}\n\n        for (let y = 0; y < numberOfParametersInQueryString; y += 1) {\n          const paramName = `param_${y}`\n\n          parameterObject[paramName] = parameters[i + y]\n        }\n\n        transformedParameters.push(parameterObject)\n      }\n    }\n\n    return {\n      queryString: newQueryString,\n      parameters: transformedParameters\n    }\n  }\n\n  private readonly region: string\n\n  private readonly secretArn: string\n\n  private readonly resourceArn: string\n\n  private readonly database: string\n\n  private readonly client: any\n\n  private readonly loggerFn?: (query: string, parameters: any) => void\n\n  private transaction: any = null\n\n  constructor(\n    region: string,\n    secretArn: string,\n    resourceArn: string,\n    database: string,\n    loggerFn?: (query: string, parameters: any) => void\n  ) {\n    this.region = region\n    this.secretArn = secretArn\n    this.resourceArn = resourceArn\n    this.database = database\n    this.client = createDataApiClient({\n      secretArn,\n      resourceArn,\n      database,\n      options: {\n        region\n      }\n    })\n    this.loggerFn = loggerFn\n  }\n\n  public async query(query: string, parameters?: any[]): Promise<any> {\n    const transformedQueryData = DataApiDriver.transformQueryAndParameters(query, parameters)\n\n    if (this.loggerFn) {\n      this.loggerFn(transformedQueryData.queryString, transformedQueryData.parameters)\n    }\n\n    const clientOrTransaction = this.transaction || this.client\n\n    const result = await clientOrTransaction.query(\n      transformedQueryData.queryString,\n      transformedQueryData.parameters\n    )\n\n    if (result.records) {\n      return result.records\n    }\n\n    return result\n  }\n\n  public startTransaction(): any {\n    if (this.transaction) {\n      throw new Error('Transaction already started')\n    }\n\n    this.transaction = this.client.transaction()\n  }\n\n  public async commitTransaction(): Promise<void> {\n    if (!this.transaction) {\n      throw new Error(\"Transaction doesn't exist\")\n    }\n\n    await this.transaction.commit()\n    this.transaction = null\n  }\n\n  public async rollbackTransaction(): Promise<void> {\n    if (!this.transaction) {\n      throw new Error(\"Transaction doesn't exist\")\n    }\n\n    await this.transaction.rollback()\n    this.transaction = null\n  }\n}\n"],"names":["require$$0","sqlString","AWS","createDataApiClient"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,IAAI,SAAS,IAAI,OAAO,CAAC;;IAEzB,IAAI,gBAAgB,MAAM,IAAI,CAAC;IAC/B,IAAI,kBAAkB,IAAI,KAAK,CAAC;IAChC,IAAI,mBAAmB,GAAG,yBAAyB,CAAC;IACpD,IAAI,gBAAgB,MAAM;MACxB,IAAI,KAAK,KAAK;MACd,IAAI,KAAK,KAAK;MACd,IAAI,KAAK,KAAK;MACd,IAAI,KAAK,KAAK;MACd,IAAI,KAAK,KAAK;MACd,MAAM,GAAG,KAAK;MACd,GAAG,MAAM,KAAK;MACd,IAAI,KAAK,MAAM;MACf,IAAI,KAAK,MAAM;KAChB,CAAC;;IAEF,SAAS,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,GAAG,EAAE,eAAe,EAAE;MAC3D,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,IAAI,GAAG,GAAG,EAAE,CAAC;;QAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UACnC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;SAC5E;;QAED,OAAO,GAAG,CAAC;OACZ,MAAM,IAAI,eAAe,EAAE;QAC1B,OAAO,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC;OAChE,MAAM;QACL,OAAO,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,GAAG,GAAG,CAAC;OACnG;KACF,CAAC;;IAEF,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,gBAAgB,EAAE,QAAQ,EAAE;MAClE,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,EAAE;QACrC,OAAO,MAAM,CAAC;OACf;;MAED,QAAQ,OAAO,GAAG;QAChB,KAAK,SAAS,EAAE,OAAO,CAAC,GAAG,IAAI,MAAM,GAAG,OAAO,CAAC;QAChD,KAAK,QAAQ,EAAE,OAAO,GAAG,GAAG,EAAE,CAAC;QAC/B,KAAK,QAAQ;UACX,IAAI,GAAG,YAAY,IAAI,EAAE;YACvB,OAAO,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,IAAI,OAAO,CAAC,CAAC;WACzD,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC7B,OAAO,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;WAC7C,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC/B,OAAO,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;WACtC,MAAM,IAAI,OAAO,GAAG,CAAC,WAAW,KAAK,UAAU,EAAE;YAChD,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;WAClC,MAAM,IAAI,gBAAgB,EAAE;YAC3B,OAAO,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;WACrC,MAAM;YACL,OAAO,SAAS,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;WAChD;QACH,SAAS,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;OACnC;KACF,CAAC;;IAEF,SAAS,CAAC,WAAW,GAAG,SAAS,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE;MAC5D,IAAI,GAAG,GAAG,EAAE,CAAC;;MAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;QAEnB,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;UACtB,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC;SACjF,MAAM;UACL,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;SACtE;OACF;;MAED,OAAO,GAAG,CAAC;KACZ,CAAC;;IAEF,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE;MAC1E,IAAI,MAAM,IAAI,IAAI,EAAE;QAClB,OAAO,GAAG,CAAC;OACZ;;MAED,IAAI,EAAE,MAAM,YAAY,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;QACvD,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;OACnB;;MAED,IAAI,UAAU,UAAU,CAAC,CAAC;MAC1B,IAAI,iBAAiB,GAAG,MAAM,CAAC;MAC/B,IAAI,MAAM,cAAc,EAAE,CAAC;MAC3B,IAAI,WAAW,SAAS,CAAC,CAAC;MAC1B,IAAI,KAAK,CAAC;;MAEV,OAAO,WAAW,GAAG,MAAM,CAAC,MAAM,KAAK,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3E,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;QAE1B,IAAI,GAAG,GAAG,CAAC,EAAE;UACX,SAAS;SACV;;QAED,IAAI,KAAK,GAAG,GAAG,KAAK,CAAC;YACjB,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACvC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;;QAEtE,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACrD,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC;QACzC,WAAW,EAAE,CAAC;OACf;;MAED,IAAI,UAAU,KAAK,CAAC,EAAE;;QAEpB,OAAO,GAAG,CAAC;OACZ;;MAED,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE;QAC3B,OAAO,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;OACvC;;MAED,OAAO,MAAM,CAAC;KACf,CAAC;;IAEF,SAAS,CAAC,YAAY,GAAG,SAAS,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE;MAC7D,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;;MAExB,IAAI,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE;QACvB,OAAO,MAAM,CAAC;OACf;;MAED,IAAI,IAAI,CAAC;MACT,IAAI,KAAK,CAAC;MACV,IAAI,GAAG,CAAC;MACR,IAAI,IAAI,CAAC;MACT,IAAI,MAAM,CAAC;MACX,IAAI,MAAM,CAAC;MACX,IAAI,WAAW,CAAC;;MAEhB,IAAI,QAAQ,KAAK,OAAO,EAAE;QACxB,IAAI,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;QAC/B,KAAK,SAAS,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAChC,GAAG,WAAW,EAAE,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC5B,MAAM,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC9B,MAAM,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC9B,WAAW,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC;OACpC,MAAM;QACL,IAAI,EAAE,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;;QAEnC,IAAI,EAAE,KAAK,KAAK,IAAI,EAAE,KAAK,CAAC,EAAE;UAC5B,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;SACzC;;QAED,IAAI,SAAS,EAAE,CAAC,cAAc,EAAE,CAAC;QACjC,KAAK,SAAS,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACnC,GAAG,WAAW,EAAE,CAAC,UAAU,EAAE,CAAC;QAC9B,IAAI,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC;QAC/B,MAAM,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;QACjC,MAAM,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;QACjC,WAAW,GAAG,EAAE,CAAC,kBAAkB,EAAE,CAAC;OACvC;;;MAGD,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG;QAChF,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,GAAG;QAC5E,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;;MAE1B,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;KAC1B,CAAC;;IAEF,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE;MACzD,OAAO,GAAG,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;KACnD,CAAC;;IAEF,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;MACnE,IAAI,GAAG,GAAG,EAAE,CAAC;;MAEb,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;QACtB,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;QAEtB,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;UAC7B,SAAS;SACV;;QAED,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;OACjH;;MAED,OAAO,GAAG,CAAC;KACZ,CAAC;;IAEF,SAAS,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,GAAG,EAAE;MAChC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,MAAM,IAAI,SAAS,CAAC,+BAA+B,CAAC,CAAC;OACtD;;MAED,OAAO;QACL,WAAW,EAAE,SAAS,WAAW,GAAG,EAAE,OAAO,GAAG,CAAC,EAAE;OACpD,CAAC;KACH,CAAC;;IAEF,SAAS,YAAY,CAAC,GAAG,EAAE;MACzB,IAAI,UAAU,GAAG,mBAAmB,CAAC,SAAS,GAAG,CAAC,CAAC;MACnD,IAAI,UAAU,GAAG,EAAE,CAAC;MACpB,IAAI,KAAK,CAAC;;MAEV,QAAQ,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG;QAC9C,UAAU,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,UAAU,GAAG,mBAAmB,CAAC,SAAS,CAAC;OAC5C;;MAED,IAAI,UAAU,KAAK,CAAC,EAAE;;QAEpB,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;OACxB;;MAED,IAAI,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE;QAC3B,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;OACvD;;MAED,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC;KAC/B;;IAED,SAAS,OAAO,CAAC,MAAM,EAAE,MAAM,EAAE;MAC/B,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;MAC3B,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,EAAE;QAC7B,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;OACvB;;MAED,OAAO,MAAM,CAAC;KACf;;IAED,SAAS,eAAe,CAAC,EAAE,EAAE;MAC3B,IAAI,EAAE,KAAK,GAAG,EAAE;QACd,OAAO,CAAC,CAAC;OACV;;MAED,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;MAC9C,IAAI,CAAC,EAAE;QACL,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;OACrG;MACD,OAAO,KAAK,CAAC;KACd;;;IC5OD,wEAAc,GAAGA,WAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;MC4B1C,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC;QAC/B,SAAS,EAAE,IAAI;QACf,UAAU,EAAE,EAAE;QACd,kBAAkB,EAAE,IAAI;OACzB,EAAC;MACF,QAAQ,CAAC,eAAe,CAAC,CAAC,EAAC;;;;;;;;MAQ3B,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,EAAE,MAAM,KAAK,CAAC,GAAG,GAAG,CAAC,GAAE;;;MAGjD,MAAM,QAAQ,GAAG,IAAI;QACnB,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;UACnC,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;UAC5E,KAAK,CAAC,CAAC,4BAA4B,CAAC,EAAC;;;MAGzC,MAAM,WAAW,GAAG,IAAI;QACtB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU;UACpD,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,KAAK,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;UAC7D,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;UAChC,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UACvC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,uCAAuC,CAAC,CAAC;UACrE,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,qCAAqC,CAAC,CAAC;UACzD,GAAE;;;MAGN,MAAM,aAAa,GAAG,CAAC,MAAM,CAAC,IAAI;QAChC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,QAAQ;UACpC,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ;UACvD,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,4BAA4B,CAAC,CAAC;UACxD,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;UACjC,KAAK,CAAC,CAAC,uBAAuB,CAAC,EAAC;;;MAGpC,MAAM,YAAY,GAAG,CAAC,MAAM,CAAC,IAAI;QAC/B,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB,KAAK,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB;UAC1E,IAAI,CAAC,CAAC,CAAC,CAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC,uCAAuC,CAAC,CAAC;UAC7E,MAAM,CAAC,mBAAkB;;;MAG7B,MAAM,aAAa,GAAG,CAAC,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,KAAK;QACxD,OAAO,MAAM,CAAC,MAAM;UAClB,EAAE,SAAS,CAAC,WAAW,EAAE;UACzB,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;YACzB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE;SACzD;QACF;;;MAGD,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;OAC9D,EAAE,EAAC;;;MAGJ,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG;OAC9D,EAAE,EAAC;;;MAGJ,MAAM,OAAO,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAC;;;MAG9D,MAAM,eAAe,GAAG,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACpD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YAChE,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;OAC/B,EAAE,EAAC;;;;MAaJ,MAAM,aAAa,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK;QACpD,OAAO;UACL,eAAe,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK;YAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;cACpB,IAAI,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAC;cAC/C,IAAI,GAAG,KAAK,CAAC,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,GAAE,EAAE;cACjD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;aAC5C,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;cAC5B,IAAI,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;gBACrC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAC;eAC3D,MAAM,IAAI,GAAG,KAAK,CAAC,EAAE;gBACpB,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,EAAC;gBACjD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAACC,oEAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAC;eACrD;cACD,OAAO,GAAG;aACX,MAAM;cACL,OAAO,GAAG;aACX;WACF,CAAC,EAAE,CAAC;UACL,UAAU,EAAE,GAAG;SAChB;QACF;;;MAGD,MAAM,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC;;MAEvD,MAAM,WAAW,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACnD,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAC;;;;MAI1C,MAAM,YAAY,GAAG,GAAG,IAAI;QAC1B,IAAI,CAAC,GAAG,EAAC;;;;QAIT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;UACnD,OAAO,CAAC,KAAK,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE;cAC9B,CAAC,KAAK,GAAG,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,GAAG;cAC3C,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;cACzD,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;SACzC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK;UACrB,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG;YACtB;cACE,CAAC,CAAC,CAAC,KAAK,GAAG;gBACT,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,KAAK,MAAM,GAAG,CAAC,EAAE,GAAG,SAAS;eACzD;aACF;WACF;SACF,CAAC,EAAE,CAAC;QACN;;;;MAID,MAAM,OAAO,GAAG,GAAG;QACjB,OAAO,GAAG,KAAK,QAAQ,GAAG,aAAa;UACrC,OAAO,GAAG,KAAK,SAAS,GAAG,cAAc;UACzC,OAAO,GAAG,KAAK,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,WAAW;UAC9D,OAAO,GAAG,KAAK,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,aAAa;UAClE,GAAG,KAAK,IAAI,GAAG,QAAQ;UACvB,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,WAAW;;UAElC,UAAS;;;MAGb,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK;QACtC,OAAO;UACL,IAAI;UACJ,KAAK,EAAE;YACL,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;cACnD,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;WACnC;SACF;QACF;;;;MAID,MAAM,aAAa,GAAG;QACpB;UACE,cAAc;UACd,sBAAsB;UACtB,OAAO;UACP,eAAe;UACf,aAAa;SACd;QACD,OAAO;QACP,WAAW;;QAEX,MAAM,CAAC,MAAM;UACX,WAAW,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE;UACrC,sBAAsB,KAAK,SAAS,GAAG,EAAE,sBAAsB,EAAE,GAAG,EAAE;UACtE,OAAO,GAAG;YACR,OAAO,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO,GAAG,cAAc,GAAG,KAAK,CAAC;WAClE,GAAG,EAAE;UACN,aAAa,GAAG,EAAE,aAAa,EAAE,mBAAmB,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE;UAC1E,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC;YAC3C,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE;UAClD;;;;MAIH,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,OAAO,KAAK;;;QAGtC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;UAChD,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE;YACrB,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;SAC/C,CAAC,GAAG,GAAE;;;QAGP,OAAO,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;;;UAG5B,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK;;;YAGjC,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,EAAE;cACzB,OAAO,OAAO;gBACZ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC;kBAC1C,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;;;aAGrB,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;cACnC,OAAO,OAAO;gBACZ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;kBAC1D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;;aAGrC,MAAM;;;cAGL,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI;gBAC7B,IAAI,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;kBAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,KAAI;iBACxB;eACF,EAAC;;;cAGF,OAAO,OAAO;gBACZ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;kBAC1D,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACrC;;WAEF,EAAE,OAAO,GAAG,EAAE,GAAG,EAAE,CAAC;SACtB,CAAC,GAAG,EAAE;QACR;;;MAGD,MAAM,mBAAmB,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI;QAC9C,OAAO,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC;UACtD,EAAE,QAAQ,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE;OACpD,EAAC;;;;MAIF,MAAM,WAAW,GAAG,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,IAAI;QACxD,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAC;;;;;;;;;MAStD,MAAM,KAAK,GAAG,eAAe,MAAM,CAAC,GAAG,KAAK,EAAE;;;QAG5C,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAC;;;QAG3B,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAC;QAC1B,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,EAAC;;;QAGnC,MAAM,kBAAkB,GAAG,YAAY,CAAC,MAAM,CAAC,IAAI,EAAC;;;QAGpD,MAAM,UAAU,GAAG,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC;;;QAGrD,MAAM,EAAE,eAAe,CAAC,UAAU,EAAE,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAC;;;QAG9E,MAAM,OAAO,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC;aACrC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,MAAK;;QAErD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;UAC1B,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;UAC1B;YACE,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;YACpC,GAAG,EAAE,UAAU;WAChB;;UAED,eAAe,CAAC,MAAM,GAAG,CAAC;;YAExB,EAAE,CAAC,OAAO,GAAG,eAAe,GAAG,YAAY,GAAG,eAAe,EAAE,GAAG,EAAE;;UAEtE,kBAAkB,IAAI,CAAC,OAAO,GAAG,EAAE,qBAAqB,EAAE,IAAI,EAAE,GAAG,EAAE;;UAErE,MAAM,CAAC,aAAa,GAAG,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,GAAG,EAAE;UACpE;;QAED,IAAI;;;UAGF,IAAI,MAAM,GAAG,OAAO,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE;cAC5E,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAC;;;;;UAKlD,OAAO,aAAa;YAClB,MAAM;YACN,kBAAkB;YAClB,IAAI,CAAC,CAAC,CAAC,CAAC,qBAAqB,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK;WACtD;;SAEF,CAAC,MAAM,CAAC,EAAE;;UAET,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACzB,IAAI,QAAQ,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,mBAAmB;cACjD,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;aACzD,CAAC,OAAO,GAAE;;YAEX,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAC;WAC1B;;UAED,MAAM,CAAC;SACR;;QAEF;;;;;;;;;MASD,MAAM,WAAW,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK;;QAEpC,IAAI,IAAI,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAC;QACrD,IAAI,OAAO,GAAG,GAAE;QAChB,IAAI,QAAQ,GAAG,MAAM,GAAE;;QAEvB,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM;UAC5B,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;UAC1B;YACE,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC;YACpC,kBAAkB,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7C,GAAG,EAAE,MAAM,CAAC,GAAG;WAChB;UACF;;QAED,OAAO;UACL,KAAK,EAAE,SAAS,GAAG,IAAI,EAAE;YACvB,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;cACjC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC;aACtB,MAAM;cACL,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,EAAC;aAC9B;YACD,OAAO,IAAI;WACZ;UACD,QAAQ,EAAE,SAAS,EAAE,EAAE;YACrB,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE,EAAE,QAAQ,GAAG,GAAE,EAAE;YAC/C,OAAO,IAAI;WACZ;UACD,MAAM,EAAE,iBAAiB,EAAE,OAAO,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;SAC5E;QACF;;;MAGD,MAAM,MAAM,GAAG,OAAO,MAAM,CAAC,OAAO,CAAC,QAAQ,KAAK;;QAEhD,IAAI,OAAO,GAAG,GAAE;;;QAGhB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,MAAM,CAAC,GAAG,CAAC,gBAAgB;UACzD,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SACpD,CAAC,OAAO,GAAE;;;QAGX,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,aAAa,EAAE,EAAC;;;QAGvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;UAEvC,IAAI,MAAM,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAC;;UAEjG,OAAO,CAAC,IAAI,CAAC,MAAM,EAAC;SACrB;;;QAGD,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB;UAChE,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SACzD,CAAC,OAAO,GAAE;;;QAGX,OAAO,CAAC,IAAI,CAAC,CAAC,iBAAiB,CAAC,EAAC;;;QAGjC,OAAO,OAAO;QACf;;;;;;;IAOH,4EAAc,GAAG,CAAC,MAAM,KAAK;;;MAG3B,MAAM,OAAO,GAAG,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,GAAG,MAAM,CAAC,OAAO;UAC/D,MAAM,CAAC,OAAO,KAAK,SAAS,GAAG,KAAK,CAAC,CAAC,2BAA2B,CAAC,CAAC;UACnE,GAAE;;;MAGN,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,KAAK,EAAE;QACrCC,MAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAC;OACxD;;;MAGD,MAAM,MAAM,GAAG;;;QAGb,SAAS,EAAE,OAAO,MAAM,CAAC,SAAS,KAAK,QAAQ,GAAG,MAAM,CAAC,SAAS;YAC9D,KAAK,CAAC,CAAC,iCAAiC,CAAC,CAAC;;;QAG9C,WAAW,EAAE,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,GAAG,MAAM,CAAC,WAAW;WACrE,KAAK,CAAC,CAAC,mCAAmC,CAAC,CAAC;;;QAG/C,QAAQ,EAAE,OAAO,MAAM,CAAC,QAAQ,KAAK,QAAQ,GAAG,MAAM,CAAC,QAAQ;YAC3D,MAAM,CAAC,QAAQ,KAAK,SAAS,GAAG,KAAK,CAAC,CAAC,2BAA2B,CAAC,CAAC;YACpE,SAAS;;;;;;;;QAQb,kBAAkB;UAChB,OAAO,MAAM,CAAC,kBAAkB,KAAK,SAAS;YAC5C,MAAM,CAAC,kBAAkB,GAAG,IAAI;;;;QAIpC,GAAG,EAAE,IAAIA,MAAG,CAAC,cAAc,CAAC,OAAO,CAAC;;QAErC;;;MAGD,OAAO;;QAEL,KAAK,EAAE,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;;QAEnC,WAAW,EAAE,CAAC,CAAC,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;;;QAGzC,qBAAqB,EAAE,CAAC,IAAI;UAC1B,MAAM,CAAC,GAAG,CAAC,qBAAqB;YAC9B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;WACtE,CAAC,OAAO,EAAE;QACb,gBAAgB,EAAE,CAAC,IAAI;UACrB,MAAM,CAAC,GAAG,CAAC,gBAAgB;YACzB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;WACtE,CAAC,OAAO,EAAE;QACb,iBAAiB,EAAE,CAAC,IAAI;UACtB,MAAM,CAAC,GAAG,CAAC,iBAAiB;YAC1B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;WAC3D,CAAC,OAAO,EAAE;QACb,gBAAgB,EAAE,CAAC,IAAI;UACrB,MAAM,CAAC,GAAG,CAAC,gBAAgB;YACzB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;WACtE,CAAC,OAAO,EAAE;QACb,mBAAmB,EAAE,CAAC,IAAI;UACxB,MAAM,CAAC,GAAG,CAAC,mBAAmB;YAC5B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;WAC3D,CAAC,OAAO,EAAE;OACd;;MAEF,eAAe;;IC9ehB;QA6DE,uBACE,MAAc,EACd,SAAiB,EACjB,WAAmB,EACnB,QAAgB,EAChB,QAAmD;YAP7C,gBAAW,GAAQ,IAAI,CAAA;YAS7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;YACpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;YAC1B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;YAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;YACxB,IAAI,CAAC,MAAM,GAAGC,wEAAmB,CAAC;gBAChC,SAAS,WAAA;gBACT,WAAW,aAAA;gBACX,QAAQ,UAAA;gBACR,OAAO,EAAE;oBACP,MAAM,QAAA;iBACP;aACF,CAAC,CAAA;YACF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;SACzB;QAhFa,yCAA2B,GAAzC,UAA0C,KAAa,EAAE,UAAkB;YACzE,IAAM,eAAe,GAAG,6GAA6G,CAAA;YAErI,IAAI,+BAA+B,GAAG,CAAC,CAAA;YAEvC,IAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE;gBACpD,IAAM,SAAS,GAAG,WAAS,+BAAiC,CAAA;gBAE5D,+BAA+B,IAAI,CAAC,CAAA;gBAEpC,OAAO,MAAI,SAAW,CAAA;aACvB,CAAC,CAAA;YAEF,IACE,UAAU;gBACV,UAAU,CAAC,MAAM,GAAG,CAAC;gBACrB,UAAU,CAAC,MAAM,GAAG,+BAA+B,KAAK,CAAC,EACzD;gBACA,MAAM,IAAI,KAAK,CAAC,wCAAsC,+BAA+B,yCACzE,UAAU,CAAC,MAAM,cAAW,CAAC,CAAA;aAC1C;YAED,IAAM,qBAAqB,GAAU,EAAE,CAAA;YAEvC,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvC,IAAM,eAAe,GAAG,UAAU,CAAC,MAAM,GAAG,+BAA+B,CAAA;gBAE3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC3C,IAAM,eAAe,GAAQ,EAAE,CAAA;oBAE/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,+BAA+B,EAAE,CAAC,IAAI,CAAC,EAAE;wBAC3D,IAAM,SAAS,GAAG,WAAS,CAAG,CAAA;wBAE9B,eAAe,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;qBAC/C;oBAED,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;iBAC5C;aACF;YAED,OAAO;gBACL,WAAW,EAAE,cAAc;gBAC3B,UAAU,EAAE,qBAAqB;aAClC,CAAA;SACF;QAsCY,6BAAK,GAAlB,UAAmB,KAAa,EAAE,UAAkB;;;;;;4BAC5C,oBAAoB,GAAG,aAAa,CAAC,2BAA2B,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;4BAEzF,IAAI,IAAI,CAAC,QAAQ,EAAE;gCACjB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,WAAW,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAA;6BACjF;4BAEK,mBAAmB,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAA;4BAE5C,qBAAM,mBAAmB,CAAC,KAAK,CAC5C,oBAAoB,CAAC,WAAW,EAChC,oBAAoB,CAAC,UAAU,CAChC,EAAA;;4BAHK,MAAM,GAAG,SAGd;4BAED,IAAI,MAAM,CAAC,OAAO,EAAE;gCAClB,sBAAO,MAAM,CAAC,OAAO,EAAA;6BACtB;4BAED,sBAAO,MAAM,EAAA;;;;SACd;QAEM,wCAAgB,GAAvB;YACE,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;aAC/C;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAA;SAC7C;QAEY,yCAAiB,GAA9B;;;;;4BACE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gCACrB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;6BAC7C;4BAED,qBAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAA;;4BAA/B,SAA+B,CAAA;4BAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;;;;;SACxB;QAEY,2CAAmB,GAAhC;;;;;4BACE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gCACrB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;6BAC7C;4BAED,qBAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAA;;4BAAjC,SAAiC,CAAA;4BACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;;;;;SACxB;QACH,oBAAC;IAAD,CAAC,IAAA;;;;;;;;"}